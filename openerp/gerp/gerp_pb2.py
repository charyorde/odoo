# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gerp.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import guser_pb2 as guser__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='gerp.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\ngerp.proto\x1a\x0bguser.proto2\xb2\x01\n\x04Gerp\x12+\n\x06signup\x12\x0e.SignupRequest\x1a\x0f.SignupResponse\"\x00\x12,\n\x05login\x12\x11.BasicCredentials\x1a\x0e.LoginResponse\"\x00\x12\"\n\x07getUser\x12\x0e.FindUserParam\x1a\x05.User\"\x00\x12+\n\ngetPartner\x12\x11.FindPartnerParam\x1a\x08.Partner\"\x00\x62\x06proto3')
  ,
  dependencies=[guser__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)





try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class GerpStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.signup = channel.unary_unary(
          '/Gerp/signup',
          request_serializer=guser__pb2.SignupRequest.SerializeToString,
          response_deserializer=guser__pb2.SignupResponse.FromString,
          )
      self.login = channel.unary_unary(
          '/Gerp/login',
          request_serializer=guser__pb2.BasicCredentials.SerializeToString,
          response_deserializer=guser__pb2.LoginResponse.FromString,
          )
      self.getUser = channel.unary_unary(
          '/Gerp/getUser',
          request_serializer=guser__pb2.FindUserParam.SerializeToString,
          response_deserializer=guser__pb2.User.FromString,
          )
      self.getPartner = channel.unary_unary(
          '/Gerp/getPartner',
          request_serializer=guser__pb2.FindPartnerParam.SerializeToString,
          response_deserializer=guser__pb2.Partner.FromString,
          )


  class GerpServicer(object):

    def signup(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def login(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getUser(self, request, context):
      """rpc loginWithFacebook() return (LoginResponse) {}

      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getPartner(self, request, context):
      """A partner in gerp is a customer
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_GerpServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'signup': grpc.unary_unary_rpc_method_handler(
            servicer.signup,
            request_deserializer=guser__pb2.SignupRequest.FromString,
            response_serializer=guser__pb2.SignupResponse.SerializeToString,
        ),
        'login': grpc.unary_unary_rpc_method_handler(
            servicer.login,
            request_deserializer=guser__pb2.BasicCredentials.FromString,
            response_serializer=guser__pb2.LoginResponse.SerializeToString,
        ),
        'getUser': grpc.unary_unary_rpc_method_handler(
            servicer.getUser,
            request_deserializer=guser__pb2.FindUserParam.FromString,
            response_serializer=guser__pb2.User.SerializeToString,
        ),
        'getPartner': grpc.unary_unary_rpc_method_handler(
            servicer.getPartner,
            request_deserializer=guser__pb2.FindPartnerParam.FromString,
            response_serializer=guser__pb2.Partner.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Gerp', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaGerpServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def signup(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def login(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getUser(self, request, context):
      """rpc loginWithFacebook() return (LoginResponse) {}

      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getPartner(self, request, context):
      """A partner in gerp is a customer
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaGerpStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def signup(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    signup.future = None
    def login(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    login.future = None
    def getUser(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """rpc loginWithFacebook() return (LoginResponse) {}

      """
      raise NotImplementedError()
    getUser.future = None
    def getPartner(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """A partner in gerp is a customer
      """
      raise NotImplementedError()
    getPartner.future = None


  def beta_create_Gerp_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Gerp', 'getPartner'): guser__pb2.FindPartnerParam.FromString,
      ('Gerp', 'getUser'): guser__pb2.FindUserParam.FromString,
      ('Gerp', 'login'): guser__pb2.BasicCredentials.FromString,
      ('Gerp', 'signup'): guser__pb2.SignupRequest.FromString,
    }
    response_serializers = {
      ('Gerp', 'getPartner'): guser__pb2.Partner.SerializeToString,
      ('Gerp', 'getUser'): guser__pb2.User.SerializeToString,
      ('Gerp', 'login'): guser__pb2.LoginResponse.SerializeToString,
      ('Gerp', 'signup'): guser__pb2.SignupResponse.SerializeToString,
    }
    method_implementations = {
      ('Gerp', 'getPartner'): face_utilities.unary_unary_inline(servicer.getPartner),
      ('Gerp', 'getUser'): face_utilities.unary_unary_inline(servicer.getUser),
      ('Gerp', 'login'): face_utilities.unary_unary_inline(servicer.login),
      ('Gerp', 'signup'): face_utilities.unary_unary_inline(servicer.signup),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Gerp_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Gerp', 'getPartner'): guser__pb2.FindPartnerParam.SerializeToString,
      ('Gerp', 'getUser'): guser__pb2.FindUserParam.SerializeToString,
      ('Gerp', 'login'): guser__pb2.BasicCredentials.SerializeToString,
      ('Gerp', 'signup'): guser__pb2.SignupRequest.SerializeToString,
    }
    response_deserializers = {
      ('Gerp', 'getPartner'): guser__pb2.Partner.FromString,
      ('Gerp', 'getUser'): guser__pb2.User.FromString,
      ('Gerp', 'login'): guser__pb2.LoginResponse.FromString,
      ('Gerp', 'signup'): guser__pb2.SignupResponse.FromString,
    }
    cardinalities = {
      'getPartner': cardinality.Cardinality.UNARY_UNARY,
      'getUser': cardinality.Cardinality.UNARY_UNARY,
      'login': cardinality.Cardinality.UNARY_UNARY,
      'signup': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Gerp', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
