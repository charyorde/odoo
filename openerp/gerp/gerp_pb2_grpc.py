# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import guser_pb2 as guser__pb2


class GerpStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.signup = channel.unary_unary(
        '/Gerp/signup',
        request_serializer=guser__pb2.SignupRequest.SerializeToString,
        response_deserializer=guser__pb2.SignupResponse.FromString,
        )
    self.login = channel.unary_unary(
        '/Gerp/login',
        request_serializer=guser__pb2.BasicCredentials.SerializeToString,
        response_deserializer=guser__pb2.LoginResponse.FromString,
        )
    self.getUser = channel.unary_unary(
        '/Gerp/getUser',
        request_serializer=guser__pb2.FindUserParam.SerializeToString,
        response_deserializer=guser__pb2.User.FromString,
        )
    self.getPartner = channel.unary_unary(
        '/Gerp/getPartner',
        request_serializer=guser__pb2.FindPartnerParam.SerializeToString,
        response_deserializer=guser__pb2.Partner.FromString,
        )


class GerpServicer(object):

  def signup(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def login(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getUser(self, request, context):
    """rpc loginWithFacebook() return (LoginResponse) {}

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getPartner(self, request, context):
    """A partner in gerp is a customer
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GerpServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'signup': grpc.unary_unary_rpc_method_handler(
          servicer.signup,
          request_deserializer=guser__pb2.SignupRequest.FromString,
          response_serializer=guser__pb2.SignupResponse.SerializeToString,
      ),
      'login': grpc.unary_unary_rpc_method_handler(
          servicer.login,
          request_deserializer=guser__pb2.BasicCredentials.FromString,
          response_serializer=guser__pb2.LoginResponse.SerializeToString,
      ),
      'getUser': grpc.unary_unary_rpc_method_handler(
          servicer.getUser,
          request_deserializer=guser__pb2.FindUserParam.FromString,
          response_serializer=guser__pb2.User.SerializeToString,
      ),
      'getPartner': grpc.unary_unary_rpc_method_handler(
          servicer.getPartner,
          request_deserializer=guser__pb2.FindPartnerParam.FromString,
          response_serializer=guser__pb2.Partner.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Gerp', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
